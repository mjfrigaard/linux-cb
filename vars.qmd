---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
    comment: '#'
---

# Variables {#sec-vars}

```{bash}
#| label: setup
#| include: false
whoami
```

```{r}
#| label: common
#| include: false
source("_common.R")
```

```{r}
#| label: co_box_dev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "r",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is under development. Thank you for your patience.
  "
)
```

This chapter covers the essential aspects of variables in Linux environments. I'll be using VS Code because I can quickly switch between shells in the Terminal window.

## [Linux Variables]{style="font-size: 1.05em; font-weight: bold;"}

Variables in Linux are used to store data that can be accessed and manipulated by the operating system and applications. They play a crucial role in scripting, programming, and managing system configurations. By storing values in variables, users and scripts can dynamically reference and change these values without hard-coding them, making scripts more flexible and maintainable.

In Linux, variables can hold different types of data, such as strings, integers, or file paths. They can be used for various purposes, including:

-   Customizing the user environment (e.g., setting the default editor).\
-   Storing temporary data within scripts.\
-   Passing data between programs and scripts.\
-   Configuring system and application settings.

The significance of variables lies in their ability to simplify complex tasks, enhance automation, and improve the overall efficiency of the Linux environment.

### Environment vs. Shell

In Linux, variables are broadly categorized into environment variables and shell variables.

**Environment variables** are global variables that are available system-wide and can influence the behavior of the shell and other programs. They are inherited by all child processes.

Environment variables are often used to configure the shell environment, set application settings, and pass data to child processes.

| Variable | Description                                                |
|----------|------------------------------------------------------------|
| `PATH`   | Specifies the directories to search for executable files.  |
| `HOME`   | Represents the current userâ€™s home directory.              |
| `USER`   | Contains the name of the current user.                     |
| `LANG`   | Defines the language and locale settings for applications. |

: Common environment variables

**Shell variables** are local to the shell session in which they are defined. They are not inherited by child processes unless explicitly exported.

Shell variables are typically used for temporary data storage within scripts, customizing the shell prompt, and managing session-specific settings.

| Variable | Description                          |
|----------|--------------------------------------|
| `PS1`    | Defines the primary prompt string.   |
| `PS2`    | Defines the secondary prompt string. |

: Common shell variables

## [Setting Variables]{style="font-size: 1.05em; font-weight: bold;"}

In the following sections we'll cover setting shell and environment variables in your shell. These commands will work in Bash or Zsh.

### Setting Shell Variables

Shell variables in Linux are defined within the context of the current shell session. To set a shell variable, simply assign a value to a variable name using the following syntax:

``` sh
VARIABLE_NAME=value
```

Variable names are case-sensitive and traditionally use uppercase letters. When creating a new variable, there should be no spaces around the `=` sign. We can check the value of the new variable using `echo`:

```{bash}
#| eval: false
MY_VAR="Hello, World"
```

```{bash}
#| eval: false
echo $MY_VAR
# Hello, World
```

```{r}
#| label: margin_box_shell_vars
#| echo: false
#| results: asis
#| eval: true
margin_box(shell = "zsh", sys = "macos")
```

### Removing Shell Variables

To remove a shell variable, use the **<code>@sec-unset</code>** command followed by the variable name:

```{bash}
#| eval: false
unset MY_VAR
```

After running unset, the variable `MY_VAR` will no longer exist in the current shell session.


To list all shell variables, use the **<code>@sec-set</code>** command:

``` sh
set
```

### Setting Environment Variables

Environment variables are set similarly to shell variables but are made available to child processes by using the **<code>@sec-export</code>** command. To set an environment variable, follow these steps:

1.  Assign a value to a variable.
2.  Export the variable.

```{bash}
#| eval: false
MY_ENV_VAR="This is an environment variable"
export MY_ENV_VAR
```

You can also combine these steps into a single command:

```{bash}
#| eval: false
export MY_ENV_VAR="This is an environment variable"
```

To verify the value of an environment variable, use the `echo` command:

```{r}
#| label: margin_box_env_vars
#| echo: false
#| results: asis
#| eval: true
margin_box(shell = "zsh", sys = "macos")
```

```{bash}
#| eval: false
echo $MY_ENV_VAR
# This is an environment variable
```

To list all environment variables, use the `printenv` or `env` command:

```{bash}
#| eval: false
printenv
```

or

```{bash}
#| eval: false
env
```

## [Using Variables]{style="font-size: 1.05em; font-weight: bold;"}

The section below covers how to use environment and shell variables in the terminal and in shell script (`.sh`) files.

### Using Shell Variables

Using shell variables involves referencing them within scripts or commands with a dollar sign (`$`) prefix and the variable. Below is an example of using a shell variable in an `if`/`then` loop:

```{bash}
count=5
if [ $count -gt 3 ]; then 
  echo "Count is greater than 3"; 
fi
```

The code above could be stored in a script (`if_count.sh`), where the shell variables could be used to store and manipulate data dynamically by calling `source`:

```{bash}
touch if_count.sh
echo "count=5
if [ $count -gt 3 ]; then 
  echo "Count is greater than 3"; 
fi" > if_count.sh
```


```{bash}
source if_count.sh
```

```{bash}
#| echo: false
rm if_count.sh
```

### Using Environment Variables

Environment variables can be accessed in the same way as shell variables by prefixing the variable name with a dollar sign (`$`). Since they are available to child processes, environment variables are particularly useful for configuring application settings and passing data to scripts and programs.

For example, `PWD` works similar to the `pwd` command, but the path is stored as a string to use in scripts or programs.

```{bash}
#| eval: false
echo $PWD
# /Users/username/projects/books/linux-cb
```

In a script, we can use environment variables to ensure that certain settings or configurations are applied (like `HOME` and `USER`)

Assume the following is stored in `my_config.sh`

```{r}
#| label: create_my_config.sh
#| echo: false
#| eval: true
if (!exists("my_config.sh")) {
  file.create("my_config.sh")
  writeLines(text = '#!/bin/bash
echo "Users home directory: $HOME"
echo "Current user: $USER"
echo "Current language: $LANG"', con = "my_config.sh")
}
```

```sh
#!/bin/bash
echo "User's home directory: $HOME"
echo "Current user: $USER"
echo "Current language: $LANG"
```

These variables don't need to be defined in the script--they can just be stored and called directly: 

```{bash}
#| eval: false
source my_config.sh
# User's home directory: /Users/username
# Current user: username
# Current language: en_US.UTF-8
```

```{bash}
#| echo: false
rm my_config.sh
```

## [Key Differences]{style="font-size: 1.05em; font-weight: bold;"}

Understanding the difference between environment and shell variables is essential for effective Linux system administration and scripting. It helps users manage and customize their environment efficiently, ensuring that scripts and applications work as intended.

### Scope

:::{layout="[50,50]" layout-valign="top"}

Environment variables have a global scope and are available to all processes. 

Shell variables have a local scope and are limited to the shell session.
  
:::

### Inheritance

:::{layout="[50,50]" layout-valign="top"}

Environment variables are inherited by child processes.

Shell variables need to be exported to be available to child processes.

:::

### Purpose

:::{layout="[50,50]" layout-valign="top"}

Environment variables are generally used for system-wide configuration and application settings.
  
Shell variables are used for script-specific or session-specific tasks.

:::

## [Recap]{style="font-size: 1.05em; font-weight: bold;"} 

By understanding and utilizing shell and environment variables effectively, you can enhance the functionality and flexibility of your Linux scripts and system configurations. We'll touch on this topic again in the [shell scripts](scripts.qmd) section.

````{=html}
<!--
## Using Variables



### Setting Shell Variables

Basic syntax for setting variables (`varname=value`).

### Setting Environment Variables

Basic syntax for exporting environment variables (`export VARNAME=value`).

## [Using Variables]{style="font-size: 1.05em; font-weight: bold;"} 

### Using Shell Variables

Accessing variable values (`echo $varname`).

Examples of common shell variables.

### Using Environment Variables

How to make environment variables persistent (`.bashrc`, `.profile`, etc.).

Examples of critical environment variables (`PATH`, `HOME`, `USER`).

## [Variables, Commands and Utilities]{style="font-size: 1.05em; font-weight: bold;"} 

- `printenv`: Displaying environment variables.

- `set`: Viewing shell and environment variables.

- `unset`: Deleting variables.

- `export`: Marking variables to be exported to child processes.

- Using `env` for running programs in a modified environment.

### Variables in Scripts

- How to use variables to customize scripts.

- Passing variables to scripts via command line.

- Reading and modifying variables within scripts.

- Example script demonstrating variable use.

### Advanced Variable Features

- Arrays and associative arrays in Bash.

- Integer operations and manipulating string variables.

- Special variables (`$0`, `$1`, `$?`, `$$`, `$@`).

### Security and Best Practices

- Security implications of improperly handling variables.

- Best practices for naming and using variables.

- Avoiding common pitfalls (e.g., overwriting critical environment variables).

## [Recp]{style="font-size: 1.05em; font-weight: bold;"} 

- Recap of key points covered in the chapter.

- Additional resources for deeper exploration (books, online tutorials, communities).

-->
````
