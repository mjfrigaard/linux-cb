---
engine: knitr
knitr:
  opts_chunk: 
    collapse: true
    comment: '#'
---

# Directories {#sec-dirs}

```{bash}
#| label: setup
#| include: false
whoami
```


```{r}
#| label: common
#| include: false
# Sys.setenv('QUARTO_PROJECT_DIR' = 'data')
# Sys.getenv('QUARTO_PROJECT_DIR')
source("_common.R")
```


```{r}
#| label: co_box_rev
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  look = "default", 
  hsize = "1.25", 
  size = "1.00", 
  header = "Caution", 
  fold = FALSE,
  contents = "This section is being revised. Thank you for your patience."
)
```

When presented with a new map, the most important thing to find is your location on it. It's hard to know where you're going without knowing where you are. In Linux, directories are more than just containers for files; they are a critical part of the hierarchical file system, which is organized in a tree-like structure starting from the root directory (`/`).

## [Root Directory]{style="font-size: 1.05em; font-weight: bold;"} 

The root directory is the topmost directory in the Linux file system hierarchy. All other directories and files are nested within it. It is represented by a single forward slash `/` and contains critical system directories like `/bin`, `/etc`, `/home`, and `/var`.

```{=html}

<style>

.codeStyle span:not(.nodeLabel) {
  font-family: monospace;
  font-size: 1.75rem;
  font-weight: bold;
  color: #9753b8 !important;
  background-color: #faf9ed;
  padding: 0.2em;
}

</style>
```

```{mermaid}
%%| fig-width: 6.5
%%| fig-align: center
%%| fig-cap: 'The `root` directory'
%%{init: {'theme': 'base', 'themeVariables': { 'fontFamily': 'Inconsolata', 'primaryColor': '#89D6FB', 'edgeLabelBackground':'#02577A'}}}%%

flowchart TD
  Root(<code>/</code>)
  bin(<code>/bin</code>)
  etc(<code>/etc</code>)
  home(<code>/home</code>)
  usr(<code>/usr</code>)
  var(<code>/var</code>)
  tmp(<code>/tmp</code>)

  Root --> bin
  Root --> etc
  Root --> home
  Root --> usr
  Root --> var
  Root --> tmp
```

### Subdirectories

Beneath the root directory, the Linux file system is organized into various subdirectories, each serving specific purposes:

`/bin` – Contains essential user command binaries 

`/etc` – Stores system-wide configuration files.

`/home` – Houses personal directories for each user.

`/var` – Contains variable data like logs and spool files.

In Linux systems, the `~` represents the user's 'home' directory.

### File paths

A file path is a character string specifying the unique location of a file or directory within the hierarchical file system. File paths can be **absolute** (starting from the root  (`/`) directory) or **relative** (starting from the current (`.`) directory). 

## [Navigate]{style="font-size: 1.05em; font-weight: bold;"}  {#sec-nav-dirs}

### `pwd`

**<code>@sec-pwd</code>** (print working directory) tells you exactly where you are in the filesystem.

```{bash}
#| eval: false
pwd 
# /Users/username/projects/books/linux-cb
```

[]{style="font-size: 1.25em; font-weight: bold; font-style: italic;"} 

```{bash}
#| eval: true 
#| echo: false
echo "my important information" > data/report.txt
```

The output from `pwd` is the file path to our local working directory.

```{bash}
#| eval: false
cd ~
pwd
# /Users/username
```


### `tree`

The `tree` command will recursively print the directory structure of a file path in a 'tree-like' format, visually representing the hierarchy of files and directories.

Below is an example 'folder tree' for the current working directory returned from the `pwd` command above:

```{bash}
#| eval: false 
# /Users/ 
#   └─ username/ -> represented as '~'
#        └─ project/ 
#             └─ books/ 
#                 └─ linux-cb/
```


The output from `pwd` is an absolute file path, and **absolute file paths** do not change regardless of the current working directory. 

### `cd`

Move from one directory to another with **<code>@sec-cd</code>** (change directory). For example, `cd data` takes you to the `data` folder *inside* our current working directory.  

```{bash}
#| eval: false
cd data
```

In the command above, `data` is a relative file path. **Relative file paths** specify the location of a file *relative to the current working directory*.

:::{layout="[50,50]" layout-valign="top"}

If we view our current directory with `tree` after changing it to `data`, we see the current location listed as `.`:

``` sh
cd data 
tree -d
# .
# └── raw
# 
# 2 directories
```

:::

It's important to notice the difference between absolute and relative paths, because it makes it easier to navigate the operating system and manipulate files and folders.

For example, can use a relative file path to view the `report.txt` file in the `data` folder with `cat`:

```{bash}
cd data
cat report.txt
```

`data/report.txt` is the relative file path (i.e., relative to the current working directory), and it's meaning is based on the directory from which it is referenced.

```{bash}
#| echo: false
rm data/report.txt
```

### `ls`

**<code>@sec-ls</code>** (list) lists the files and folders in a given location. In `/bin`, `ls` would show you the software tools available:

```{bash}
cd /bin # change location
ls # what's in here?
```


### `find`

**<code>@sec-find</code>** can be used to locate files *or* directories using the `-type` and `-name` options. The example below looks in the current working directory (`.`) for a folder named `data`:

```{bash}
find . -type d -name data
```

## [Manage]{style="font-size: 1.05em; font-weight: bold;"}  {#sec-manage-dirs}

In the Linux world, file and directory management is a fundamental skill. This chapter introduces some common commands that will allow you to create, copy, move, remove, and link files and directories. 

### `mkdir`

**<code>@sec-mkdir</code>** (Make Directory) builds a new folder wherever you tell it to, like making a new folder in data for inputs (`data/in`) or outputs (`data/out`) 

```{bash}
mkdir data/in
mkdir data/out
```

Confirm with `tree -d` (the `-d` is for directories):

```{bash}
#| eval: false 
tree data -d
# data
# ├── in
# └── out
# 
# 3 directories
```

### `cp`

**<code>@sec-cp</code>** duplicates files or folders. The `cp` command is used to copy files or directories from one location to another. Imagine having a file (`binary_data.tsv`) on your root (`.`) directory that you want to copy to the `/data/in` folder; you could use `cp` to make a duplicate. 

```{bash}
#| include: false 
touch binary_data.tsv
echo "0 1 0 1 0
0 0 1 0 1
1 0 1 0 1" > binary_data.tsv
cat binary_data.tsv
```

```{bash}
cp binary_data.tsv data/in/binary_data.tsv
```

Confirm with `tree`

```{bash}
#| eval: false
tree data/in
# data/in
# └── binary_data.tsv
# 
# 1 directory, 1 file
```

### `mv`

**<code>@sec-mv</code>**, short for move, moves files or directories from one location to another. We'll use it to move `data/binary_data.tsv` to `data/out/binary_data.tsv`:

```{bash}
# move file
mv data/in/binary_data.tsv data/out/binary_data.tsv 
```

Confirm move with `tree`:[^tree-pattern]

```{bash}
#| eval: false
tree data -P *.tsv
# data
# ├── in
# └── out
#     └── binary_data.tsv
# 
# 3 directories, 1 file
```

[^tree-pattern]: The `-P *.tsv` option for `tree` tells it to look in `data` for files or folders with a `.tsv` extension. We'll cover wildcards and patterns in the @sec-symbols-patterns chapter.

It can also be used for renaming files. 

```{bash}
# rename file
mv data/out/binary_data.tsv  data/out/bin_dat.tsv 
```

```{bash}
#| eval: false
# confirm rename 
tree data/out
# data/out
# └── bin_dat.tsv
# 
# 1 directory, 1 file
```

`mv` is especially useful for organizing files and directories that are in the wrong place.

### `rm`

The **<code>@sec-rm</code>** command stands for **remove** and is used to delete files or directories.

```{bash}
#| error: true
# remove doc folder
rm data/out
```

By default, it won't remove a directory without the `-R` or `-r` option.

```{r}
#| label: co_box_rm
#| echo: false
#| results: asis
#| eval: true
co_box(
  color = "o",
  look = "default", 
  hsize = "1.15", 
  size = "1.05", 
  header = "Warning", 
  fold = FALSE,
  contents = "\n
It's important to note here that the command-line is not very forgiving. Using `rm` is a powerful action with significant consequences, as it permanently deletes files, akin to shredding documents. There's usually no easy way to recover deleted files unless you have a backup.

> '*Linux is like a chainsaw. Chainsaws are powerful tools, and make many difficult tasks like cutting through thick logs quite easy. Unfortunately, this power comes with danger: chainsaws can cut just as easily through your leg.*' - Gary Bernhardt[^bernhardt]

[^bernhardt]: As quoted in [Bioinformatics Data Skills: Reproducible and Robust Research with Open Source Tools (2015) by Vince Buffalo](https://bit.ly/3sVBSne).
\n"
)
```

```{bash}
# add option 
rm -R data/out
```

```{bash}
#| label: reset
#| echo: false
rm -Rf data/in
rm -Rf data/out
rm -R binary_data.tsv
```

## [Recap]{style="font-size: 1.05em; font-weight: bold;"} 

Given the principle that **everything is a file** in Linux, directories are treated as special types of files that contain references to other files and directories, facilitating the organization and management of data. 

Understanding how to navigate, manipulate, and manage directories is essential for effective use of the Linux operating system. 

```{r}
#| label: git_contrib_box
#| echo: false
#| results: asis
#| eval: true
git_contrib_box()
```
