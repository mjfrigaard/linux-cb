{
  "hash": "617af6fc03c39de63e31a0897be4bc3f",
  "result": {
    "engine": "knitr",
    "markdown": "---\nengine: knitr\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: '# '\n---\n\n\n\n\n\n# Basics  {#sec-basic-cmnds .unnumbered}\n\n\n\n\n\n\n\n\n:::: {.callout-warning collapse='false' appearance='default' icon='false'}\n\n## [Caution]{style='font-weight: bold; font-size: 1.25em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nThis section is being revised. Thank you for your patience.\n\n::: \n\n::::\n\n\n\n\n\nThe next sections introduce some common topics and commands that will help you navigate folders (or directories), manipulate and manage files, and check system processes. These sections focus on executing single commands in a Terminal. In the next section we'll dive into the Linux command syntax (i.e., arguments, options, and pipes).\n\n> [\"Everything is a file\"]{style=\"font-size: 1.25em; font-weight: bold; font-style: italic;\"}\n\n\n\n\n\n```{=html}\n\n<style>\n\n.codeStyle span:not(.nodeLabel) {\n  font-family: monospace;\n  font-size: 1.75rem;\n  font-weight: bold;\n  color: #9753b8 !important;\n  background-color: #faf9ed;\n  padding: 0.2em;\n}\n\n</style>\n```\n\n```{mermaid}\n%%| fig-cap: 'Everything is a file'\n%%| fig-align: center\n%%{init: {'theme': 'neutral', 'themeVariables': { 'fontFamily': 'Inconsolata', 'fontSize': '14px'}}}%%\n\nmindmap\n  root((\"**Everything is a File**\"))\n    Files\n      txt(\"Text Files\")\n      bin(\"Binary Files\")\n      exe(\"Executable Files\")\n    Directory\n      Folders\n      Special Directories \n        id1(\"**/**, **/home**\")\n    Device\n      Block Devices\n        id2(\"`**/dev/sda**`\")\n      Character Devices\n        id3(\"`**/dev/tty**`\")\n    Process\n      Process IDs\n        id4(\"**/proc**\")\n      Memory Maps\n    Socket \n      id5[\"Inter-process Communication\"]\n        id6(\"**/var/run/docker.sock**\")\n      \n```\n\n\n\n\n\n### Directories \n\nIn Linux, [directories](dirs.qmd) are special types of files that contain other files, including other directories. This ties into a fundamental concept in Linux: **everything is a file**. This means that not only are traditional files like documents and images considered files, but so are directories, devices, processes, and even network sockets.\n\n### Files \n\nIn Linux, all system components, whether traditional files, directories, devices, or even processes, are represented as [files](files.qmd). This abstraction makes Linux both powerful and flexible, as it allows users to interact with a wide range of system elements using a consistent set of tools and commands.\n\n### System \n\nLinux provides a variety of powerful commands for monitoring [system](sys.qmd) performance and managing processes. These tools are crucial for maintaining system health, troubleshooting issues, and ensuring that resources are being used efficiently. Keeping in mind that **everything is a file** in Linux, system processes and resources are also represented as files within the `/proc` directory, allowing these commands to interact with the system at a granular level.\n\n### Variables \n\nIn Linux, [variables](vars.qmd) are used to store data that can be referenced and manipulated by scripts and commands. There are different types of variables, including environment variables, which are used by the system and applications to configure behavior. Understanding and managing these variables is crucial, especially since they play a key role in how Linux handles processes, paths, and user settings. Remember, since **everything is a file**, even these variables interact with the system in a file-like manner, often stored and accessed in configuration files.\n\n<!--\n\n#### Advanced Topics\n\n- **Scripting and Automation**: Basics of writing shell scripts to automate routine tasks.\n\n- **Customizing the Environment**: How to customize the shell experience, including themes, prompts, and aliases.\n\n- **Security Practices**: Basic security practices using terminal commands, such as setting file permissions and managing user accounts.\n\n#### Practical Exercises\n\n- **Hands-On Examples**: Provide step-by-step exercises to practice basic and intermediate commands.\n\n- **Project Ideas**: Offer project suggestions that involve using terminal commands to solve real-world problems, like data backup scripts or a basic server setup.\n\n-->\n\n## Recap \n\n\n\n\n\n\n:::: {.callout-note collapse='false' appearance='simple' icon=false}\n\n## [See a typo, error, or something missing?]{style='font-weight: bold; font-size: 1.15em;'}\n\n::: {style='font-size: 1.00em; color: #282b2d;'}\n\n\nPlease open an issue on [GitHub.](https://github.com/mjfrigaard/linux-cb/issues/new)\n\n::: \n\n::::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}